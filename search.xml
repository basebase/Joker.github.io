<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[hadoop Partitioner使用及注意点]]></title>
      <url>http://yoursite.com/2017/02/07/hadoop-Partitioner%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>前言<br>hadoop已经出来这么长时间了，分区的文章早已经多如牛毛，为何你还要写呢?<br>其实呢，这篇文章主要是想要介绍一下使用MR自定义分区需要注意的一些点。<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>hadoop已经出来这么长时间了，分区的文章早已经多如牛毛，为何你还要写呢?<br>其实呢，这篇文章主要是想要介绍一下使用MR自定义分区需要注意的一些点。<br>可能早有前辈已经指出该问题了。但还是容我自己做一个小小的记录，哈哈哈~~~</p>
<p>我们知道map数据会写入到分区，默认的分区只有一个，但是我想要10个又或者是100个，可以吗？<br>当然是可以的是。</p>
<p>你只需要创建一个类继承org.apache.hadoop.mapreduce.Partitioner<br>类就可以完全定义自己想要的分区方式。<br>然后在job中设置自定义的Partitioner类即可。<br>但是，这样写真的就结束了吗？</p>
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>PartitionMapper.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">        String[] tokens = value.toString().split(<span class="string">","</span>);</div><div class="line">        String gender = tokens[<span class="number">2</span>];</div><div class="line">        String nameAgeScore = tokens[<span class="number">0</span>] + <span class="string">","</span> + tokens[<span class="number">1</span>] + <span class="string">","</span> + tokens[<span class="number">3</span>];</div><div class="line">        context.write(<span class="keyword">new</span> Text(gender), <span class="keyword">new</span> Text(nameAgeScore));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>AgePartitioner.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text key, Text value, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</div><div class="line">        </div><div class="line">        String[] nameAgeScore = value.toString().split(<span class="string">","</span>);</div><div class="line">        String age = nameAgeScore[<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> ageInt = Integer.parseInt(age);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (numPartitions == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ageInt &lt;= <span class="number">20</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ageInt &gt; <span class="number">20</span> &amp;&amp; ageInt &lt;= <span class="number">50</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span> % numPartitions;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> % numPartitions;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>ParitionReducer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxScore = Integer.MIN_VALUE;</div><div class="line">        String name = <span class="string">""</span>;</div><div class="line">        String age = <span class="string">""</span>;</div><div class="line">        String gender = <span class="string">""</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> score = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Text val : values) &#123;</div><div class="line">            String[] valTokens = val.toString().split(<span class="string">","</span>);</div><div class="line">            score = Integer.parseInt(valTokens[<span class="number">2</span>]);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (score &gt; maxScore) &#123;</div><div class="line">                name = valTokens[<span class="number">0</span>];</div><div class="line">                age = valTokens[<span class="number">1</span>];</div><div class="line">                gender = key.toString();</div><div class="line">                maxScore = score;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        context.write(<span class="keyword">new</span> Text(name), <span class="keyword">new</span> Text(<span class="string">"age- "</span> + age + <span class="string">","</span> + gender + <span class="string">","</span> + <span class="string">" score-"</span> + maxScore));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>驱动类，具体的模板代码我就不再写入，只将Partitioner设置展示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">job.setPartitionerClass(AgePartitioner.class);</div></pre></td></tr></table></figure></p>
<p>以上这个例子，是我在其它文章中截取下来的，具体地址，会在链接中给出。<br>现在，你可以运行该例子，你会发现Reduce输出的只有一个文件，然后你还会发现其实使用的并非是自定义<br>的Partitioner类。</p>
<p>一开始的时候，我有点懵逼了。what？我的设置没有生效吗？<br>你的设置是没有问题的，但是你却忘记了一项重要的事情。究竟是什么事情呀，快点说说呀（臭鱼）。<br>在说出这个秘密之前，我们看看map的context.write()这个方法是怎么做的吧。</p>
<p>MapTask.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(K key, V value)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">      collector.collect(key, value,</div><div class="line">                        partitioner.getPartition(key, value, partitions));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>其中partitioner是在哪里定义的呢？<br>在NewOutputCollector类中，该类作为MapTask内部类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NewOutputCollector</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">mapreduce</span>.<span class="title">RecordWriter</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MapOutputCollector&lt;K,V&gt; collector;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> org.apache.hadoop.mapreduce.Partitioner&lt;K,V&gt; partitioner;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> partitions;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    NewOutputCollector(org.apache.hadoop.mapreduce.JobContext jobContext,</div><div class="line">                       JobConf job,</div><div class="line">                       TaskUmbilicalProtocol umbilical,</div><div class="line">                       TaskReporter reporter</div><div class="line">                       ) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</div><div class="line">      collector = createSortingCollector(job, reporter);</div><div class="line">      partitions = jobContext.getNumReduceTasks();</div><div class="line">      <span class="keyword">if</span> (partitions &gt; <span class="number">1</span>) &#123;</div><div class="line">        partitioner = (org.apache.hadoop.mapreduce.Partitioner&lt;K,V&gt;)</div><div class="line">          ReflectionUtils.newInstance(jobContext.getPartitionerClass(), job);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        partitioner = <span class="keyword">new</span> org.apache.hadoop.mapreduce.Partitioner&lt;K,V&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(K key, V value, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> partitions - <span class="number">1</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>我们来看看构造函数之中，如果partitions大于1就从配置中读取我们自己的Partitioner对象并实例化给引用，否则自己就创建一个实例。<br>那partitions是从jobContext.getNumReduceTasks();读取出来的，这个要怎么配置呢？</p>
<font color="DeepPink" size="3"><br>job.setNumReduceTasks(number);<br></font>

<p>配置该值之后，那么就可以使用我们自己定义的分区函数了。<br>好了，文章到这里也就结束了，欢迎大家拍砖！！！</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a color="red" href="https://hadooptutorial.wikispaces.com/Custom+partitioner" target="_blank" rel="external"><br>就这里的例子，数据这里也有</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mapreduce join]]></title>
      <url>http://yoursite.com/2017/02/03/mapreduce-join/</url>
      <content type="html"><![CDATA[<p>前言<br>我们知道hive，mysql等sql语言都可以进行join操作。那么mapreduce是如何join的呢？<br>在说明mapreduce进行join开始，我们来先看看sql的语法。</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们知道hive，mysql等sql语言都可以进行join操作。那么mapreduce是如何join的呢？<br>在说明mapreduce进行join开始，我们来先看看sql的语法。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    tab1.*, </div><div class="line">    tab2.* </div><div class="line"><span class="keyword">FROM</span> </div><div class="line">    table1 tab1</div><div class="line"><span class="keyword">JOIN</span></div><div class="line">    table2 tb2 </div><div class="line">    <span class="keyword">on</span> tab1.id = tab2.id</div></pre></td></tr></table></figure>
<p>两张表关联在一起，需要什么数据，就从不同的表中取出数据即可。</p>
<h3 id="mapreduce如何JOIN"><a href="#mapreduce如何JOIN" class="headerlink" title="mapreduce如何JOIN"></a>mapreduce如何JOIN</h3><p>通过前面的铺垫，我们知道sql进行表关联是多么的简单。那么通过程序如何进行关联呢？<br>我们hive的数据是不是从HDFS上来的，HDFS上是不是文件数据。那么我们可以把表数据看成是一个文件。<br>那么两张表可不可以看成两个文件，hive也是拿到这两个文件进行关联的。</p>
<p>现在如果不使用MR进行计算，写一个程序来进行连接呢？<br>文件A假设1GB，文件B500MB。<br>此时，我么可以把文件B读入到内存之中。<br>文件B的数据结构：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;String&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>然后一行一行读取文件A的数据，判断key是否存在，如果存在，则把文件A的值+List的值遍历输出<br>是不是也可以得到呢。</p>
<p>上面的数据可以放置在内存中，我觉得挺合理的，应为单机能处理的数据表示数据量普遍不算很大。<br>但是，如果说你现在的数据有1T呢？还有可能放置在内存中吗？</p>
<p>我看过大部分博客内容，大部分都是相同的写法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values,</span></span></div><div class="line">                Reducer&lt;Text, Text, Text, Text&gt;.Context context)</div><div class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">            LinkedList&lt;String&gt; linkU = <span class="keyword">new</span> LinkedList&lt;String&gt;();  <span class="comment">//users值</span></div><div class="line">            LinkedList&lt;String&gt; linkL = <span class="keyword">new</span> LinkedList&lt;String&gt;();  <span class="comment">//login_logs值</span></div><div class="line">              </div><div class="line">            <span class="keyword">for</span> (Text tval : values) &#123;</div><div class="line">                String val = tval.toString();  </div><div class="line">                <span class="keyword">if</span>(val.startsWith(<span class="string">"u#"</span>)) &#123;</div><div class="line">                    linkU.add(val.substring(<span class="number">2</span>));</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val.startsWith(<span class="string">"l#"</span>)) &#123;</div><div class="line">                    linkL.add(val.substring(<span class="number">2</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">              </div><div class="line">            <span class="keyword">for</span> (String u : linkU) &#123;</div><div class="line">                <span class="keyword">for</span> (String l : linkL) &#123;</div><div class="line">                    context.write(key, <span class="keyword">new</span> Text(u + DELIMITER + l));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这种写法对吗，是对的。但是有没有更好的，有。（稍后让你看，😏😏😏😏）<br>但是，我么通常也会遇到数据倾斜的问题，可能是某一组值特别的大，那么如果在JOIN的时候<br>也遇到了特别多相同的key值，那么内存还放得下吗？<br>不过这位使用LinkedList也是非常不错的，插入删除速度也是优于ArrayList（点个赞）。</p>
<p>好了，说了这么多。你真的能比这些人的内容写的好的吗？不会再吹牛吧（尴尬表情）</p>
<p>来说说我如何去做。<br>自定义key值之后，由于我不是放入内存的，所以字段输出的顺序可能是有点问题的<br>所以还要进行二次排序，到reduce的时候一组数据已经在一起了，我么设置一个boolean值<br>在第一次遍历值的时候不写入文件中，而是记录在一个字符串，然后第二次boolean更改后<br>把上一次和这一次的值一起写入。</p>
<p>来看看代码吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">Pair</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Text first;</div><div class="line">    <span class="keyword">private</span> Text second;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(String first, String second)</span> </span>&#123;</div><div class="line">        set(<span class="keyword">new</span> Text(first), <span class="keyword">new</span> Text(second));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">()</span> </span>&#123;</div><div class="line">        set(<span class="keyword">new</span> Text(), <span class="keyword">new</span> Text());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(Text first, String second)</span> </span>&#123;</div><div class="line">        set(first, <span class="keyword">new</span> Text(second));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(String first, Text second)</span> </span>&#123;</div><div class="line">        set(<span class="keyword">new</span> Text(first), second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Text first, Text second)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.first = first;</div><div class="line">        <span class="keyword">this</span>.second = second;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> first;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">getSecond</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> second;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        first.write(out);</div><div class="line">        second.write(out);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        first.readFields(in);</div><div class="line">        second.readFields(in);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> first.hashCode() * <span class="number">163</span> + second.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Pair) &#123;</div><div class="line">            Pair pair = (Pair) obj;</div><div class="line">            <span class="keyword">return</span> first.equals(pair.first) &amp;&amp; second.equals(pair.second);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair pair)</span> </span>&#123;</div><div class="line">        <span class="comment">// int cmp = first.compareTo(pair.first);</span></div><div class="line">        <span class="keyword">int</span> cmp = pair.first.compareTo(first);</div><div class="line">        <span class="keyword">if</span> (cmp != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> cmp;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// return second.compareTo(pair.second);</span></div><div class="line">        <span class="keyword">return</span> pair.second.compareTo(second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Pair pair, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</div><div class="line"><span class="comment">//            return this.first.compareTo(pair.first);</span></div><div class="line">            <span class="keyword">return</span> pair.first.compareTo(<span class="keyword">this</span>.first);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//            return this.second.compareTo(pair.second);</span></div><div class="line">            <span class="keyword">return</span> pair.second.compareTo(<span class="keyword">this</span>.second);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LJoinMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Pair</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Text key = <span class="keyword">new</span> Text();</div><div class="line">    <span class="keyword">private</span> Text val = <span class="keyword">new</span> Text();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object line, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">        String[] tokens = value.toString().split(<span class="string">","</span>);</div><div class="line">        <span class="keyword">if</span> (tokens.length &lt; <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// key</span></div><div class="line">        String k = tokens[<span class="number">0</span>] + <span class="string">","</span> + tokens[<span class="number">1</span>];</div><div class="line">        </div><div class="line">        Pair pair = <span class="keyword">new</span> Pair(k, <span class="string">"0"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// val</span></div><div class="line"><span class="comment">//        String v = "left" + "," + tokens[2];</span></div><div class="line">         String v = tokens[<span class="number">2</span>];</div><div class="line"><span class="comment">//        key.set(k);</span></div><div class="line">        val.set(v);</div><div class="line"><span class="comment">//        context.write(key, val);</span></div><div class="line">        context.write(pair, val);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RJoinMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Pair</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    private Text key = new Text();</span></div><div class="line">    <span class="keyword">private</span> Text val = <span class="keyword">new</span> Text();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object line, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">        String[] tokens = value.toString().split(<span class="string">","</span>);</div><div class="line">        <span class="keyword">if</span> (tokens.length &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// key</span></div><div class="line">        String k = tokens[<span class="number">0</span>] + <span class="string">","</span> + tokens[<span class="number">1</span>];</div><div class="line">        </div><div class="line">        Pair pair = <span class="keyword">new</span> Pair(k, <span class="string">"1"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// val</span></div><div class="line"><span class="comment">//        String v = "right" + "," + tokens[2] + "," + tokens[3] + "," + tokens[4];</span></div><div class="line">      String v = tokens[<span class="number">2</span>] + <span class="string">","</span> + tokens[<span class="number">3</span>] + <span class="string">","</span> + tokens[<span class="number">4</span>];</div><div class="line"><span class="comment">//        key.set(k);</span></div><div class="line">        val.set(v);</div><div class="line"><span class="comment">//        context.write(key, val);</span></div><div class="line">        context.write(pair, val);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Pair</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Text val = <span class="keyword">new</span> Text();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Pair key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        String deptName = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> set = <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (Text v : values) &#123;</div><div class="line">            </div><div class="line">            String[] vs = v.toString().split(<span class="string">","</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (!set) &#123;</div><div class="line">                deptName = v.toString();</div><div class="line">                set = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(key.toString() + <span class="string">","</span> + deptName + <span class="string">","</span> + v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JOINGroup</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JOINGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Pair.class, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</div><div class="line">        Pair keyA = (Pair) a;</div><div class="line">        Pair keyB = (Pair) b;</div><div class="line"><span class="comment">//        return keyA.compareTo(keyB, 1);</span></div><div class="line">        <span class="keyword">return</span> keyB.compareTo(keyA, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JOINPartition</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Pair</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Pair key, Text value, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (key.getFirst().hashCode() % numPartitions);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JOINSort</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JOINSort</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Pair.class, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</div><div class="line">        Pair compositeKey1 = (Pair) a;</div><div class="line">        Pair compositeKey2 = (Pair) b;</div><div class="line">        <span class="keyword">return</span> compositeKey2.compareTo(compositeKey1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dirver</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</div><div class="line">            System.out.printf(<span class="string">"Usage: %s [generic options] &lt;input dir&gt; &lt;output dir&gt;\n"</span>, getClass().getSimpleName());</div><div class="line">            ToolRunner.printGenericCommandUsage(System.out);</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">        Job job = Job.getInstance(conf, <span class="string">"join"</span>);</div><div class="line">        job.setJarByClass(getClass());</div><div class="line"></div><div class="line">        MultipleInputs.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]), TextInputFormat.class, LJoinMapper.class);</div><div class="line">        MultipleInputs.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]), TextInputFormat.class, RJoinMapper.class);</div><div class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">2</span>]));</div><div class="line"></div><div class="line">        job.setReducerClass(JoinReducer.class);</div><div class="line">        </div><div class="line">        job.setGroupingComparatorClass(JOINGroup.class);</div><div class="line">        job.setPartitionerClass(JOINPartition.class);</div><div class="line">        job.setSortComparatorClass(JOINSort.class);</div><div class="line">        </div><div class="line">        job.setMapOutputKeyClass(Pair.class);</div><div class="line">        job.setMapOutputValueClass(Text.class);</div><div class="line"></div><div class="line">        job.setOutputKeyClass(NullWritable.class);</div><div class="line">        job.setOutputValueClass(Text.class);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            args = <span class="keyword">new</span> String[] &#123;<span class="string">"in/l"</span>, <span class="string">"in/r"</span>, <span class="string">"ljoinout"</span>&#125;;</div><div class="line">            ToolRunner.run(<span class="keyword">new</span> Configuration(), <span class="keyword">new</span> Dirver(), args);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>测试数据:</p>
<p>l.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1,job,beijing</div><div class="line">2,jue,shanghai</div><div class="line">3,role,shenzhen</div><div class="line">4,jie,guangzhou</div></pre></td></tr></table></figure></p>
<p>r.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1,job,30,man,333330000</div><div class="line">2,jue,90,woman,9384832</div><div class="line">3,role,100,man,9103841038</div><div class="line">4,jie,0,man,103848103474</div><div class="line">1,job,20,man,333330000</div><div class="line">1,job,10,man,333330000</div></pre></td></tr></table></figure></p>
<p>以下是输出结果：<br><img src="https://github.com/basebase/img_server/blob/master/mapreduce-join/join-01.png?raw=true" alt="join"></p>
<font color="DeepPink" size="2"><br>以上程序作为内联展示给了大家，如果对文章内容有疑问，或者有更好的建议，又或者有土豪打赏<br>都不要吝啬。谢谢！<br></font>


<h3 id="还不错的文章链接"><a href="#还不错的文章链接" class="headerlink" title="还不错的文章链接"></a>还不错的文章链接</h3><p><a href="http://codingjunkie.net/mapreduce-reduce-joins/" target="_blank" rel="external">http://codingjunkie.net/mapreduce-reduce-joins/</a><br><a href="https://www.safaribooksonline.com/library/view/data-algorithms/9781491906170/ch01.html" target="_blank" rel="external">https://www.safaribooksonline.com/library/view/data-algorithms/9781491906170/ch01.html</a><br><a href="https://chamibuddhika.wordpress.com/2012/02/26/joins-with-map-reduce/" target="_blank" rel="external">https://chamibuddhika.wordpress.com/2012/02/26/joins-with-map-reduce/</a></p>
<p>方便后人，方便自己！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[eclipse配置运行HDFS]]></title>
      <url>http://yoursite.com/2017/01/23/eclipse%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8CHDFS/</url>
      <content type="html"><![CDATA[<p>前言<br>通常我们在运行HDFS都是编译源码并配置Hadoop环境变量，然后进入sbin目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start-dfs.sh</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通常我们在运行HDFS都是编译源码并配置Hadoop环境变量，然后进入sbin目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start-dfs.sh</div></pre></td></tr></table></figure></p>
<p>用来启动hdfs的，如果想要看看NameNode的启动是不是需要配置远程调试了。（我以前弄过，但是之前没有写过博客）。</p>
<p>如果可以在本地就可以调试这些内容是不是更能了解内部是如何处理的。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>需要准备什么东东呢？<br>hadoop源码（我用的是2.7.0，你们随意）<br>IDEA或者eclipse等等用来导入源码，方便阅读。</p>
<p>假设以上内容已经齐全，现在开始进入主题。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn install -DskipTests</div><div class="line">mvn eclipse:eclipse -DdownloadSources=<span class="literal">true</span> -DdownloadJavadocs=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>导入之后，找到hdfs项目的NameNode和DataNode运行即可。<br><img src="https://github.com/basebase/img_server/blob/master/eclipse%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8CHDFS/01.png?raw=true" alt="项目图"><br><img src="https://github.com/basebase/img_server/blob/master/eclipse%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8CHDFS/02.png?raw=true" alt="NN"><br><img src="https://github.com/basebase/img_server/blob/master/eclipse%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8CHDFS/03.png?raw=true" alt="DT"></p>
<p>你以为这就结束了？？？</p>
<p>接下来，我来说说在部署和启动遇到的问题吧。</p>
<p>1、webapps/hdfs not found in CLASSPATH<br>出现这个异常是在启动NameNode的时候出现的，下面是具体抛出异常的代码(hadoop-common项目http包下的HttpServer2)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getWebAppsPath</span><span class="params">(String appName)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</div><div class="line">   URL url = getClass().getClassLoader().getResource(<span class="string">"webapps/"</span> + appName);</div><div class="line">   <span class="keyword">if</span> (url == <span class="keyword">null</span>)</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"webapps/"</span> + appName</div><div class="line">         + <span class="string">" not found in CLASSPATH"</span>);</div><div class="line">   String urlString = url.toString();</div><div class="line">   <span class="keyword">return</span> urlString.substring(<span class="number">0</span>, urlString.lastIndexOf(<span class="string">'/'</span>));</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当我debug的时候，他一直找我的hadoop-common的jar的webapp中的hdfs目录，所以导致我一直出现<br>找不到的异常，后来我重写一个该类指定hdfs项目的路径解决可以运行（如果还有其他的解决方案请在评论下方说明一下，万分感谢!）, 还有个datanode目录没有找到的异常是在运行DataNode出现的<br>具体出现的位置我给忘记了，😝😝😝😝</p>
<p>2、Exception in thread “main” java.lang.IllegalArgumentException: Invalid URI for NameNode address (check fs.defaultFS): file:/// has no authority.</p>
<p>出现此异常首先去stackoverflow找了下答案，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://10.100.20.168/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>但是对我是无效的，后来知道原因我使用的是core-default.xml的配置没有生效。<br>但是一开始我就是defualt的配置也能正常运行。。。（奇怪的问题）</p>
<p>如下代码是抛出异常的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetSocketAddress <span class="title">getAddress</span><span class="params">(URI filesystemURI)</span> </span>&#123;</div><div class="line">    String authority = filesystemURI.getAuthority();</div><div class="line">    <span class="keyword">if</span> (authority == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(</div><div class="line">          <span class="string">"Invalid URI for NameNode address (check %s): %s has no authority."</span>,</div><div class="line">          FileSystem.FS_DEFAULT_NAME_KEY, filesystemURI.toString()));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(</div><div class="line">        filesystemURI.getScheme())) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(</div><div class="line">          <span class="string">"Invalid URI for NameNode address (check %s): %s is not of scheme '%s'."</span>,</div><div class="line">          FileSystem.FS_DEFAULT_NAME_KEY, filesystemURI.toString(),</div><div class="line">          HdfsConstants.HDFS_URI_SCHEME));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> getAddress(authority);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>至于为什么会这样，在FileSystem类中有这么一段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FS_DEFAULT_NAME_KEY = </div><div class="line">                   CommonConfigurationKeys.FS_DEFAULT_NAME_KEY;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_FS = </div><div class="line">                   CommonConfigurationKeys.FS_DEFAULT_NAME_DEFAULT;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">    // CommonConfigura.java</div><div class="line">    public static final String  FS_DEFAULT_NAME_KEY = "fs.defaultFS";</div><div class="line">    public static final String  FS_DEFAULT_NAME_DEFAULT = "file:///";</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> URI <span class="title">getDefaultUri</span><span class="params">(Configuration conf)</span> </span>&#123;</div><div class="line">    <span class="comment">// 这里就是创建URI对象, 各位可以单独写个Test来看看创建的对象数据。</span></div><div class="line">    <span class="comment">// URI uri = new URI("file:///");</span></div><div class="line">    <span class="keyword">return</span> URI.create(fixName(conf.get(FS_DEFAULT_NAME_KEY, DEFAULT_FS)));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>至此，我这里就把我遇到的问题全部说完了。</p>
<p>最后，在给大家演示一下，我运行hadoop fs -put localPath hdfsPath是如何断点的。<br><img src="https://github.com/basebase/img_server/blob/master/eclipse%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8CHDFS/04.png?raw=true" alt="put"><br><img src="https://github.com/basebase/img_server/blob/master/eclipse%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8CHDFS/05.png?raw=true" alt="put-d"></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://wiki.apache.org/hadoop/EclipseEnvironment" target="_blank" rel="external">https://wiki.apache.org/hadoop/EclipseEnvironment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java自旋锁]]></title>
      <url>http://yoursite.com/2016/11/14/java%E8%87%AA%E6%97%8B%E9%94%81/</url>
      <content type="html"><![CDATA[<p>此文章不涉及与互斥锁等比比较，只是单纯的介绍一个自旋锁，如果想要了解更多可以点击参考链接<br><a id="more"></a></p>
<h3 id="一个自旋锁例子"><a href="#一个自旋锁例子" class="headerlink" title="一个自旋锁例子"></a>一个自旋锁例子</h3><p>自旋锁的介绍原理等过程我就不在此介绍了，下面的参考已经写的非常不错了！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/***</span></div><div class="line"> * 自旋锁</div><div class="line"> * <span class="doctag">@author</span> Joker</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLock</span> </span>&#123;</div><div class="line">	</div><div class="line">	AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;Thread&gt;();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count ;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">		Thread currentThread = Thread.currentThread();</div><div class="line">		System.out.println(<span class="string">"lock() -&gt; "</span> + currentThread.getName());</div><div class="line">		<span class="keyword">if</span> (currentThread == owner.get()) &#123;</div><div class="line">			count++; <span class="comment">// 获取锁的次数</span></div><div class="line">			<span class="keyword">return</span> ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">// 当线程越来越多由于while循环会浪费cpu时间片，compareAndSet需要多次对同一内存进行访问</span></div><div class="line">		<span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span> </span>&#123;</div><div class="line">		Thread currentThread = Thread.currentThread();</div><div class="line">		System.out.println(<span class="string">"unLock() -&gt; "</span> + currentThread.getName());</div><div class="line">		<span class="keyword">if</span> (currentThread == owner.get()) &#123;</div><div class="line">			<span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">				count--;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				owner.compareAndSet(currentThread, <span class="keyword">null</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLockTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> sum ;</div><div class="line">	<span class="keyword">private</span> SpinLock lock;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SpinLockTest</span><span class="params">(SpinLock lock)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.lock = lock;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.lock.lock();</div><div class="line">		<span class="keyword">this</span>.lock.lock();</div><div class="line">		System.out.println(<span class="string">"当前线程 "</span> + Thread.currentThread().getName() + <span class="string">" start..."</span>);</div><div class="line">		sum++;</div><div class="line">		System.out.println(<span class="string">"当前线程 "</span> + Thread.currentThread().getName() + <span class="string">" end..."</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">this</span>.lock.unLock();</div><div class="line">		<span class="keyword">this</span>.lock.unLock();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		SpinLock lock = <span class="keyword">new</span> SpinLock();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			SpinLockTest lockTest = <span class="keyword">new</span> SpinLockTest(lock);</div><div class="line">			Thread t = <span class="keyword">new</span> Thread(lockTest, <span class="string">"thread-lock-"</span>+i);</div><div class="line">			t.start();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		Thread.sleep(<span class="number">1000</span>);</div><div class="line">		System.out.println(sum);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后附上一张我自己画的一张运行图</p>
<p><img src="https://github.com/basebase/img_server/blob/master/java%E8%87%AA%E6%97%8B%E9%94%81/java%E8%87%AA%E6%97%8B%E9%94%81.png?raw=true" alt="java自旋锁"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.cnblogs.com/cposture/p/SpinLock.html#_label0" target="_blank" rel="external">http://www.cnblogs.com/cposture/p/SpinLock.html#_label0</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java返回引用和返回对象]]></title>
      <url>http://yoursite.com/2016/09/06/java%E8%BF%94%E5%9B%9E%E5%BC%95%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>为什么写这篇文章?<br>在写java finalize文章的时我说过，有一个同事问了一个问题。今天这篇文章就是记录此问题。<br>那么究竟是什么问题呢？</p>
<a id="more"></a>
<h3 id="为什么写这篇文章"><a href="#为什么写这篇文章" class="headerlink" title="为什么写这篇文章?"></a>为什么写这篇文章?</h3><p>在写java finalize文章的时我说过，有一个同事问了一个问题。今天这篇文章就是记录此问题。<br>那么究竟是什么问题呢？</p>
<h3 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h3><p>事情发生在中午，当时我正在写code，然后讨论组里面发出一个问题说</p>
<font color="DeepPink"><br>    java方法中直接new对象返回和赋值返回有什么区别啊？<br></font>

<p>然而，就有一位同事说出了gc，然后就没然后了！<br>包括我当时也只是说到对象没有被引用就被回收（其实这里说的也还是有问题，只能说会被加入到F-Queue中，然后等待处理）。</p>
<p>因为GC到底什么时候执行我么是不清楚的，不同的jvm有不同的算法。</p>
<p>我本着一颗搜索的心，发现有人说java的new返回的是一个临时对象，然后我就各种搜索临时对象的资料<br>无果，全部都是C/C++的描述，由于我没有接触C/C++所以看的也有点云里雾里!</p>
<p>后来经过大牛的指点，如下：</p>
<font color="DeepPink"><br>    其实java没有临时的概念，不像c有栈空间上的对象。Java对象都是堆上的，通过引用操作对象<br></font><br>看到这里是不是一目了然了😝<br><br>当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。我们知道局部变量都是放在栈中的。<br><br>来，看看下图<br><br><img src="https://github.com/basebase/img_server/blob/master/java%E8%BF%94%E5%9B%9E%E5%BC%95%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/11111.png?raw=true" alt="jvm stack"><br><br>那么当方法返回结束了，这个对象是不是没有被引用了，也就加入到F-Queue中等待处理了。<br>而在return直接new返回也是一样的。<br><br>说到这里，我么基本上可以认为二者没有区别，如果有也是微乎其微的了。<br><br>### 实践<br><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Date();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"1"</span>);</div><div class="line">		Date date = getDate();</div><div class="line">		<span class="comment">//System.gc();</span></div><div class="line">		Thread.sleep(<span class="number">10000</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>下图是没有进行gc时候运行情况。<br><img src="https://github.com/basebase/img_server/blob/master/java%E8%BF%94%E5%9B%9E%E5%BC%95%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/usedmem.png?raw=true" alt="jvm stack"><br><br>上图程序我运行了好几次，但是大部分使用情况都如上，你么在运行的时候可以多测试看看。<br><br>然后把System.gc()的注释解开，在来观察一下。<br><br>运行情况良好的一次，如下图：<br><img src="https://github.com/basebase/img_server/blob/master/java%E8%BF%94%E5%9B%9E%E5%BC%95%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/gc1.png?raw=true" alt="jvm gc"><br><br>可以看到内存使用情况，gc确实执行了。<br><br>然而，我们在看看运行N次后的情况，为了下图我也是消耗了一些时间！！！<br><img src="https://github.com/basebase/img_server/blob/master/java%E8%BF%94%E5%9B%9E%E5%BC%95%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/gc2.png?raw=true" alt="jvm gc2"><br><br>我们可以看到内存使用情况，是不是还很高，这就说明了<br><font color="DeepPink"><br>    调用java的System.gc()不一定会执行GC操作<br></font>

<p>好了，到这里就已经结束了，这里我写的是return new的返回，返回引用没有差别，当然你么自己<br>也可以测试一下😁</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实也不算是总结吧，也是今天看到的，在编写程序的时候尽量使用局部变量，这样可以有效的<br>控制内存，在方法结束的时候，栈中的数据会自动释放而不用我们操心了！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java finalize方法]]></title>
      <url>http://yoursite.com/2016/08/27/java-finalize%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>为什么写这篇文章?<br>要说finalize方法我想做java的都知道，那么finalize方法会不会执行，如果会什么时候执行？如果重写finalize方法又有什么严重的后果? </p>
<a id="more"></a>
<h3 id="为什么写这篇文章"><a href="#为什么写这篇文章" class="headerlink" title="为什么写这篇文章?"></a>为什么写这篇文章?</h3><p>要说finalize方法我想做java的都知道，那么finalize方法会不会执行，如果会什么时候执行？如果重写finalize方法又有什么严重的后果? </p>
<p>题外话：以前看Java GC相关内容主要为的是应付面试而已，不过最近有个同事提了个问题(问题你么先YY)，但他只说了对象会被回收，具体细节并没有说出，进而引发我再次探究GC<br>估计下次会以此问题展开讨论，由于我也是个菜鸟需要大家指出文章中的不足，谢谢！</p>
<h3 id="Java-finalize方法"><a href="#Java-finalize方法" class="headerlink" title="Java finalize方法"></a>Java finalize方法</h3><p>finalize方法是Object类的方法，任何类都是重写finalize方法，实现自己想要的功能。<br>默认的finalize方法什么也没做</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>但是一般都不建议自己重写finalize方法，由于在清理对象时候无法保证finalize方法一定会被执行。</p>
<p>现在我们有一段小程序非常的简单，就是打印一句话，然后程序就结束了。<br>那么，对象会被回收吗？</p>
<p>什么时候执行GC我么是不清楚的，根据不同的算法有不同的调度，有的是根据时间调度，有的是根据<br>内存使用的情况进行调度。</p>
<p>不过让我来做的话，我更倾向于后者，不管运行多长时间只要内存没到我指定的阈值大小我就不执行，<br>现在的这个想法来源hadoop的spill，假设有100m的内存使用但是只要达到上限80m的内存用量，<br>那么我就开始执行GC。【只是我的想法，哈哈~】</p>
<p>那好，无论是根据时间又或者是内存大小进行GC，但是我么就一段输出代码，程序结束了估计也不会<br>执行GC线程进行清理吧！</p>
<p>没有执行GC也就是无法执行到finalize方法了。</p>
<p>那么，有什么方法可以执行gc呢？方法是有的，但是也不能保证一定会执行gc，只能说会催促进而执行<br>GC。</p>
<p>这也就是我么常说的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.gc()</div></pre></td></tr></table></figure></p>
<p>当然还存在其它方法，在最后我会将我参考链接发出。<br>那么，什么样的对象会被执行finalize方法呢？finalize方法又会被执行多少次呢？</p>
<h3 id="对象销毁过程"><a href="#对象销毁过程" class="headerlink" title="对象销毁过程"></a>对象销毁过程</h3><p>对象的销毁过程中，按照对象的finalize执行情况，可以分为以下几种，系统会记录对象的<br>对应状态。</p>
<p>1、unfinalized 没有执行finalize，系统也不准备执行。<br>2、finalizable 可以执行finalize了，系统会在随后的某个时间执行finalize。<br>3、finalized该对象的finalize已经被执行了。 </p>
<p>GC怎么来保持对finalizable的对象的追踪呢。GC有一个Queue，<br>叫做F-Queue，所有对象在变为finalizable的时候会加入到该Queue，然后等待GC执行它的<br>finalize方法。</p>
<p>这时我们引入了对对象的另外一种记录分类，系统可以检查到一个对象属于哪一种。</p>
<p>a.reachable：活动的对象引用链可以到达的对象，包括所有线程当前栈的局部变量，<br>所有的静态变量等等。 </p>
<p>b.finalizer-reachable除了reachable外，从F-Queue可以通过引用到达的对象。<br>c.unreachable其它的对象</p>
<p><img src="https://github.com/basebase/img_server/blob/master/java-finalize%E6%96%B9%E6%B3%95/gc.gif?raw=true" alt="转换过程"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1.首先，所有的对象都是从Reachable+Unfinalized走向死亡之路的。</div><div class="line"></div><div class="line">2.当前活动对象不可达时，对象可以从Reachable状态变到F-Reachable或者Unreachable状态。</div><div class="line"></div><div class="line">3.当对象为非Reachable+Unfinalized时，GC会把它移入F-Queue，</div><div class="line">  状态变为F-Reachable+Finalizable。</div><div class="line"></div><div class="line">4.好了，关键的来了，任何时候，GC都可以从F-Queue中拿到一个Finalizable的对象，</div><div class="line">  标记它为Finalized，然后执行它的finalize方法，由于该对象在这个线程中又可达了，</div><div class="line">  于是该对象变成Reachable了（并且Finalized）。而finalize方法执行时，又有可能把其它的F-Reachable的对象变为一个Reachable的，这个叫做对象再生。</div><div class="line"></div><div class="line">5.当一个对象在Unreachable+Unfinalized时，如果该对象使用的是默认的Object的finalize，</div><div class="line">  或者虽然重写了，但是新的实现什么也不干。为了性能，GC可以把该对象直接变到Reclaimed状态直接销毁，而不用加入到F-Queue等待GC做进一步处理。</div><div class="line"></div><div class="line">6.从状态图看出，不管怎么折腾，任意一个对象的finalize只至多执行一次，一旦对象变为Finalized</div><div class="line">  就怎么也不会在回到F-Queue去了。当然没有机会再执行finalize了。 </div><div class="line"></div><div class="line">7.当对象处于Unreachable+Finalized时，该对象离真正的死亡不远了。GC可以安全的回收该对象的</div><div class="line">  内存了。进入Reclaimed。</div></pre></td></tr></table></figure>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line">	Test2 t2 ;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test1</span><span class="params">(Test2 t2)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.t2 = t2;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Test1 finalize..."</span>);</div><div class="line">		Test3.t1 = <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	String name;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test2</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Test2 finalize..."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">"is "</span> + age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> Test1 t1;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		</div><div class="line">		Test1 t1 = <span class="keyword">new</span> Test1(<span class="keyword">new</span> Test2(<span class="string">"joker"</span>, <span class="number">18</span>));</div><div class="line">		System.out.println(t1);</div><div class="line">		t1 = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		System.gc();</div><div class="line">		Thread.sleep(<span class="number">10000</span>);</div><div class="line">		System.out.println(Test3.t1);</div><div class="line">		System.out.println(Test3.t1.t2);</div><div class="line">		</div><div class="line">		t1 = <span class="keyword">null</span>;</div><div class="line">		System.gc();</div><div class="line">		System.out.println(<span class="string">"done."</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cn.base.gc.test.Test1@6b04d3c8</div><div class="line">[GC 2642K-&gt;437K(251392K), 0.0012310 secs]</div><div class="line">[Full GC 437K-&gt;350K(251392K), 0.0102620 secs]</div><div class="line">Test1 finalize...</div><div class="line">Test2 finalize...</div><div class="line">cn.base.gc.test.Test1@6b04d3c8</div><div class="line">jokeris 18</div><div class="line">[GC 2992K-&gt;446K(251392K), 0.0006800 secs]</div><div class="line">[Full GC 446K-&gt;350K(251392K), 0.0069980 secs]</div><div class="line">done.</div></pre></td></tr></table></figure>
<p>可以看到的是我们在释放test1的时候成员对象test2也一起被回收了，由于test1重写了finalize<br>方法，在最后test1又复活了。</p>
<p>由于在GC Root中又有引用链起死回生，但是我么再一次设置null并执行gc可以看到test1对象<br>没有在进入finalize方法了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>finalize方法不是每次都会执行的，使用System.gc()<br>也只不过是加快gc调用，并且重写finalize方法最好不要使对象再生，这样容易造成<br>对象的生命周期混乱！</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://mazhuang.org/2015/12/15/java-object-finalize/" target="_blank" rel="external">http://mazhuang.org/2015/12/15/java-object-finalize/</a><br><a href="http://bijian1013.iteye.com/blog/2289661" target="_blank" rel="external">http://bijian1013.iteye.com/blog/2289661</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mapreduce计算uv]]></title>
      <url>http://yoursite.com/2016/08/23/mapreduce%E8%AE%A1%E7%AE%97uv/</url>
      <content type="html"><![CDATA[<p>为什么写这篇文件?<br>我们在统计的时候pv和uv可以说的最基础的也是最常见的，相信做数据的都知道。这种需求<br>我们一般就是使用hive进行统计就完事了，非常的简单。<br>根据url计算每个页面的访问次数和独立访客用户数。</p>
<a id="more"></a>
<h3 id="为什么写这篇文件"><a href="#为什么写这篇文件" class="headerlink" title="为什么写这篇文件?"></a>为什么写这篇文件?</h3><p>我们在统计的时候pv和uv可以说的最基础的也是最常见的，相信做数据的都知道。这种需求<br>我们一般就是使用hive进行统计就完事了，非常的简单。<br>根据url计算每个页面的访问次数和独立访客用户数。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(gi) <span class="keyword">as</span> <span class="string">'pv'</span>, <span class="keyword">count</span>(<span class="keyword">distinct</span> gi) <span class="keyword">as</span> <span class="string">'uv'</span> <span class="keyword">from</span> </div><div class="line"><span class="keyword">table</span> <span class="keyword">where</span> cdate = <span class="string">'2016-06-01'</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">url</span></div></pre></td></tr></table></figure>
<p>那好，我们通过mapreduce如何计算呢?<br>我想我大多数人都是通过在reduce中使用Set或者List进行判断是否在集合中存在，<br>如果不存在那么就加1。<br>事实却是如此，我搜索发现很多blog都是此方法并且内容大致相同，包括我最开始写的mapreduce也是<br>按照这种方法做的。</p>
<p>但是，使用这种方法做数据量小看不出问题，但是数据量一旦非常大就马上出现问题。<br>因为你的数据放在了内存，很容易就oom了。</p>
<p>其实我们需要通过两个mapreduce进行计算。<br>第一个map就是分割url+uid作为key，value为1<br>数据格式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://www.google.com,zhangsan 1</div><div class="line">http://www.google.com,zhangsan 1</div><div class="line">http://www.google.com,zhangsan 1</div></pre></td></tr></table></figure>
<p>相同的key值发送到同一个reduce中，这样的话zhangsan的数据都为1了，reduce不用做什么就是<br>把key写入就行。</p>
<p>然后到了第二个map中，我们将第一个reduce的数据进行拆解就得到了url和uid的数据了<br>由于在第一个mr中已经将相同的uid和url归为一类，所以不会存在重复数据，所以这里就和<br>wordcount一样计算就行了。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>上面已经说了这么多了，是不是感觉很乏味了。来看看代码醒醒脑吧，嘿嘿嘿~</p>
<p>使用hadoop2.7.0</p>
<p>测试数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">http://www.google.com,2016-01-02,dsadasd-dasd-as-das</div><div class="line">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/,2016-01-02,000-111-11-22</div><div class="line">http://www.jd.com/?keyword=dadas&amp;keywordid=34879410794&amp;re_dcp=202m0QjIIg==&amp;traffic_source=1004&amp;test=1&amp;enc=utf8&amp;cu=true&amp;utm_source=baidu-search&amp;utm_medium=cpc&amp;utm_campaign=t_262767352_baidusearch&amp;utm_term=34879410794_0_b0d37d1995654fdb9c013c4eb7544071,2016-01-02,dasdsa-ds-ad-as-da</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsddddd-dsss</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://item.jd.com/3148810.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://item.jd.com/3148810.html,2016-01-02,d99dsa-dsdasdasda-sadas</div><div class="line">http://item.jd.com/3148762.html,2016-01-02,d99dsa-dsdasdsa-xxxx</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</div><div class="line">	<span class="keyword">private</span> LongWritable v = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		</div><div class="line">		String line = value.toString();</div><div class="line">		String[] tokens = line.split(<span class="string">","</span>);</div><div class="line">		</div><div class="line">		<span class="comment">// url + uid</span></div><div class="line">		k.set(tokens[<span class="number">0</span>] + <span class="string">","</span> + tokens[<span class="number">2</span>]);</div><div class="line">		context.write(k, v);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">		context.write(key, NullWritable.get());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVMapperUp</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</div><div class="line">	<span class="keyword">private</span> LongWritable v = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		</div><div class="line">		String line = value.toString();</div><div class="line">		String[] tokens = line.split(<span class="string">","</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (tokens.length != <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">return</span> ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		String url = tokens[<span class="number">0</span>];</div><div class="line">		</div><div class="line">		k.set(url);</div><div class="line">		context.write(k, v);</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVReducerUp</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> LongWritable res = <span class="keyword">new</span> LongWritable();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">		<span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (LongWritable val : values) &#123;</div><div class="line">			sum += val.get();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		res.set(sum);</div><div class="line">		</div><div class="line">		context.write(key, res);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configured;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVApp</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			</div><div class="line">			args = <span class="keyword">new</span> String[]&#123;<span class="string">"in/browse.txt"</span>, <span class="string">"uv_out"</span>, <span class="string">"f_uv_out"</span>&#125;;</div><div class="line">			ToolRunner.run(<span class="keyword">new</span> Configuration(), <span class="keyword">new</span> UVApp(), args);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		Job job1 = Job.getInstance(conf, <span class="string">"uv"</span>);</div><div class="line">		Job job2 = Job.getInstance(conf, <span class="string">"uv"</span>);</div><div class="line">		</div><div class="line">		job1.setJarByClass(UVApp.class);</div><div class="line">		job2.setJarByClass(UVApp.class);</div><div class="line">		</div><div class="line">		job1.setMapperClass(UVMapper.class);</div><div class="line">		job1.setReducerClass(UVReducer.class);</div><div class="line">		</div><div class="line">		job2.setMapperClass(UVMapperUp.class);</div><div class="line">		job2.setReducerClass(UVReducerUp.class);</div><div class="line">		</div><div class="line">		job1.setMapOutputKeyClass(Text.class);</div><div class="line">		job1.setMapOutputValueClass(LongWritable.class);</div><div class="line">		</div><div class="line">		job2.setMapOutputKeyClass(Text.class);</div><div class="line">		job2.setOutputValueClass(LongWritable.class);</div><div class="line">		</div><div class="line">		job1.setOutputKeyClass(Text.class);</div><div class="line">		job1.setOutputValueClass(NullWritable.class);</div><div class="line">		</div><div class="line">		job2.setOutputKeyClass(Text.class);</div><div class="line">		job2.setOutputValueClass(LongWritable.class);</div><div class="line">		</div><div class="line">		FileInputFormat.addInputPath(job1, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job1, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		</div><div class="line">		FileInputFormat.addInputPath(job2, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job2, <span class="keyword">new</span> Path(args[<span class="number">2</span>]));</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> code = job1.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(code != <span class="number">0</span>)&#123;</div><div class="line">			System.exit(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> job2.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 一般使用分布式框架表示我们数据是比较大的，放内存肯定是不合理的。<br> 看来代码质量有待提高！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[storm整合kafka重复消费问题分析]]></title>
      <url>http://yoursite.com/2016/08/11/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>为什么写这篇文章?<br>最近在整合storm+kafka一直纠结于重复数据的读取，重新启动topology更是把kafka的数据扫描一遍，<br>【如果线上逻辑较重，并且还要往数据库里面插入数据是不是有很多重复数据了！】</p>
<a id="more"></a>
<h3 id="为什么写这篇文章"><a href="#为什么写这篇文章" class="headerlink" title="为什么写这篇文章?"></a>为什么写这篇文章?</h3><p>最近在整合storm+kafka一直纠结于重复数据的读取，重新启动topology更是把kafka的数据扫描一遍，<br>【如果线上逻辑较重，并且还要往数据库里面插入数据是不是有很多重复数据了！】</p>
<h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>zookeeper-3.4.6.tar.gz<br>kafka_2.9.2-0.8.1.1<br>apache-storm-1.0.1.tar.gz</p>
<h3 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h3><p>那我们知道这kafka和storm都是依赖zk的，并且我们在创建topology的时候也是把offset写入到zk<br>但是一开始的程序是非常奇怪的，zk并没有创建我所指定的目录和id。</p>
<p>先来看一个”错误”的例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> cn.base.sk.ex03;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseRichBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitBolt</span> <span class="keyword">extends</span> <span class="title">BaseRichBolt</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1380001209433177193L</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> OutputCollector collector = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map stormConf, TopologyContext context, OutputCollector collector)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.collector = collector;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input)</span> </span>&#123;</div><div class="line">		String word = input.getString(<span class="number">0</span>);</div><div class="line">		System.out.println(<span class="string">"source data =&gt; "</span> + word);</div><div class="line">		<span class="comment">//collector.ack(input);</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.base.sk.ex03;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.storm.Config;</div><div class="line"><span class="keyword">import</span> org.apache.storm.LocalCluster;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.BrokerHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.KafkaSpout;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.SpoutConfig;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.StringScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.ZkHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.spout.SchemeAsMultiScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.TopologyBuilder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.base.sk.ex02.MyKafkaTopology;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTopology</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String zks = <span class="string">"localhost:2181/kafka"</span>;</div><div class="line">		String topic = <span class="string">"topic2"</span>;</div><div class="line">		String zkRoot = <span class="string">"/topic2"</span>;</div><div class="line">		String id = <span class="string">"split"</span>;</div><div class="line"></div><div class="line">		BrokerHosts brokerHosts = <span class="keyword">new</span> ZkHosts(zks);</div><div class="line">		SpoutConfig spoutConf = <span class="keyword">new</span> SpoutConfig(brokerHosts, topic, zkRoot, id);</div><div class="line">		spoutConf.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> StringScheme());</div><div class="line">		spoutConf.zkServers = Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">"localhost"</span>&#125;);</div><div class="line">		spoutConf.zkPort = <span class="number">2181</span>;</div><div class="line"></div><div class="line"></div><div class="line">		TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</div><div class="line">		builder.setSpout(<span class="string">"kafka-spoutx"</span>, <span class="keyword">new</span> KafkaSpout(spoutConf));</div><div class="line">		builder.setBolt(<span class="string">"word-splitx"</span>, <span class="keyword">new</span> SplitBolt()).shuffleGrouping(<span class="string">"kafka-spoutx"</span>);</div><div class="line"></div><div class="line">		Config conf = <span class="keyword">new</span> Config();</div><div class="line">		String name = MyKafkaTopology.class.getSimpleName();</div><div class="line">		conf.setMaxTaskParallelism(<span class="number">3</span>);</div><div class="line"></div><div class="line">		LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</div><div class="line">		cluster.submitTopology(name, conf, builder.createTopology());</div><div class="line"></div><div class="line"><span class="comment">//		Utils.sleep(10000);</span></div><div class="line"><span class="comment">//		cluster.shutdown();</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>上面这个例子是无法在zk中创建/topic2/split的，至于为什么我在后面会说明。<br>由于也是最近几天才开始撸起来的所以我就各种搜索，在一个blog中找到了说明</p>
<p><font color="DeepPink" size="2">原文<br>    此处需要特别注意的是，要使用backtype.storm.topology.base.BaseBasicBolt对象作为父类，否则不会在zk记录偏移量offset数据。<br></font><br>后来我修改bolt继承该类确实在zk中创建出了topic，但是至于为什么并没有详细说明。<br>我们先来看看修改后的code。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> cn.base.sk.ex02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.BasicOutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseBasicBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseRichBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Values;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaWordSplitter</span> <span class="keyword">extends</span> <span class="title">BaseBasicBolt</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(KafkaWordSplitter.class);</div><div class="line">	<span class="keyword">private</span> OutputCollector collector;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input, BasicOutputCollector collector)</span> </span>&#123;</div><div class="line">		String line = input.getString(<span class="number">0</span>);</div><div class="line">		System.out.println(<span class="string">"RECV[kafka -&gt; splitter] "</span> + line);</div><div class="line"></div><div class="line">		String[] words = line.split(<span class="string">","</span>);</div><div class="line">		<span class="keyword">for</span> (String word : words) &#123;</div><div class="line">			System.out.println(<span class="string">"EMIT[splitter -&gt; counter] "</span> + word);</div><div class="line">			collector.emit(<span class="keyword">new</span> Values(word, <span class="number">1</span>));</div><div class="line">		&#125;</div><div class="line"></div><div class="line"><span class="comment">//		collector.ack(input);</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class="line">		declarer.declare(<span class="keyword">new</span> Fields(<span class="string">"word"</span>, <span class="string">"count"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.base.sk.ex02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Map.Entry;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.BasicOutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseBasicBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseRichBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCounter</span> <span class="keyword">extends</span> <span class="title">BaseBasicBolt</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(WordCounter.class);</div><div class="line">	<span class="keyword">private</span> OutputCollector collector;</div><div class="line">	<span class="keyword">private</span> Map&lt;String, AtomicInteger&gt; countMap;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map stormConf, TopologyContext context)</span> </span>&#123;</div><div class="line">		countMap = <span class="keyword">new</span> HashMap&lt;String, AtomicInteger&gt;();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"The final result:"</span>);</div><div class="line">		Iterator&lt;Entry&lt;String, AtomicInteger&gt;&gt; iter = <span class="keyword">this</span>.countMap.entrySet().iterator();</div><div class="line">		<span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line"></div><div class="line">			Entry&lt;String, AtomicInteger&gt; entry = iter.next();</div><div class="line">			System.out.println(entry.getKey() + <span class="string">"\t:\t"</span> + entry.getValue().get());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input, BasicOutputCollector collector)</span> </span>&#123;</div><div class="line">		String word = input.getString(<span class="number">0</span>);</div><div class="line">		Integer count = input.getInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"RECV[splitter -&gt; counter] "</span> + word + <span class="string">" : "</span> + count);</div><div class="line">		AtomicInteger ai = <span class="keyword">this</span>.countMap.get(word);</div><div class="line">		<span class="keyword">if</span> (ai == <span class="keyword">null</span>) &#123;</div><div class="line">			ai = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line">			<span class="keyword">this</span>.countMap.put(word, ai);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			ai.addAndGet(count);</div><div class="line"><span class="comment">//			collector.ack(input);</span></div><div class="line">			System.out.println(<span class="string">"CHECK statistics map: "</span> + <span class="keyword">this</span>.countMap);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.base.sk.ex02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.kafka.common.utils.Utils;</div><div class="line"><span class="keyword">import</span> org.apache.storm.Config;</div><div class="line"><span class="keyword">import</span> org.apache.storm.LocalCluster;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.BrokerHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.KafkaSpout;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.SpoutConfig;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.StringScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.ZkHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.spout.SchemeAsMultiScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.TopologyBuilder;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</div><div class="line"></div><div class="line"><span class="keyword">import</span> scala.actors.threadpool.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKafkaTopology</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String zks = <span class="string">"localhost:2181/kafka"</span>;</div><div class="line">		String topic = <span class="string">"topic1"</span>;</div><div class="line">		String zkRoot = <span class="string">"/topic1"</span>;</div><div class="line">		String id = <span class="string">"word"</span>;</div><div class="line"></div><div class="line">		BrokerHosts brokerHosts = <span class="keyword">new</span> ZkHosts(zks);</div><div class="line">		SpoutConfig spoutConf = <span class="keyword">new</span> SpoutConfig(brokerHosts, topic, zkRoot, id);</div><div class="line">		spoutConf.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> StringScheme());</div><div class="line">		spoutConf.zkServers = Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">"localhost"</span>&#125;);</div><div class="line">		spoutConf.zkPort = <span class="number">2181</span>;</div><div class="line"></div><div class="line"></div><div class="line">		TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</div><div class="line">		builder.setSpout(<span class="string">"kafka-spout"</span>, <span class="keyword">new</span> KafkaSpout(spoutConf));</div><div class="line">		builder.setBolt(<span class="string">"word-split"</span>, <span class="keyword">new</span> KafkaWordSplitter()).shuffleGrouping(<span class="string">"kafka-spout"</span>);</div><div class="line">		builder.setBolt(<span class="string">"word-count"</span>, <span class="keyword">new</span> WordCounter()).fieldsGrouping(<span class="string">"word-split"</span>, <span class="keyword">new</span> Fields(<span class="string">"word"</span>));</div><div class="line"></div><div class="line">		Config conf = <span class="keyword">new</span> Config();</div><div class="line">		String name = MyKafkaTopology.class.getSimpleName();</div><div class="line">		conf.setMaxTaskParallelism(<span class="number">3</span>);</div><div class="line"></div><div class="line">		LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</div><div class="line">		cluster.submitTopology(name, conf, builder.createTopology());</div><div class="line"></div><div class="line"><span class="comment">//		Utils.sleep(10000);</span></div><div class="line"><span class="comment">//		cluster.shutdown();</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原谅我写了两个例子吧!<br>好的，上面一大段代码是修改过的。此时进入zkcli已经创建出来了我们所需的路径<br>并且已经记录了offset</p>
<p><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/01.png?raw=true" alt="zk数据"></p>
<p>读取数据的时候就从这里开始了。<br>那好，为啥继承了BaseBasicBolt类就可以，而BaseRichBolt类就不行呢。</p>
<h3 id="走进源码"><a href="#走进源码" class="headerlink" title="走进源码"></a>走进源码</h3><p>首先看看KafkaSpout类的open方法做了一些初始化的工作<br>下图才是我么要看的</p>
<p><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/02.png?raw=true" alt="kafkaSpout!nextTuple"></p>
<p>不用在意其它方法，直接进入commit()方法<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/03.png?raw=true" alt="kafkaSpout!commit"></p>
<p>看到没， 只要if成立就会在zk中创建数据。但是为什么不能进入呢，来看看lastCompletedOffset<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/04.png?raw=true" alt="kafkaSpout!lastCompletedOffset"></p>
<p>当你debug到这里的时候首先获取的是第一个key，这个map的key是offset，value是timestamp<br>读一次会和上一次进行比较，最终在里面重新赋值最新的offset。</p>
<p>仔细观察，如果继承BaseRichSpout类，调用过后map的key依旧存在，而BaseBasicBolt会进行删除，如果不删除的话会在commit判断时候一直相等。</p>
<p>那么，是在什么时候进行删除的呢？如果是你，你会想在什么时候把这份数据进行删除？<br>对的，当我们确认完毕这条数据被消费后，我们可以进行删除了。</p>
<p>在进行ack之后，我们看到删除map的数据，这样就顺利的在zk里面创建并写入数据。<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/05.png?raw=true" alt="kafkaSpout!ack"></p>
<p>那么，如果我就想继承自BaseRichBolt类，那有办法实现吗？肯定的，你只需要自己ack一下就行了<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/06.png?raw=true" alt="UserBolt!ack"></p>
<p>ok，此时你在次打开zkcli查看就存在指定的目录和id，并且重启topology也不会重新读取历史。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>BaseBasicBolt没有提供ack而是隐示进行了调用，而BaseRichSpout需要显示调用。</p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>参考：<a href="http://www.howardliu.cn/a-few-notes-about-storm/" target="_blank" rel="external">http://www.howardliu.cn/a-few-notes-about-storm/</a></p>
]]></content>
    </entry>
    
  
  
</search>
