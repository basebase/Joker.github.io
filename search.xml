<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[mapreduce计算uv]]></title>
      <url>http://yoursite.com/2016/08/23/mapreduce%E8%AE%A1%E7%AE%97uv/</url>
      <content type="html"><![CDATA[<p>为什么写这篇文件?<br>我们在统计的时候pv和uv可以说的最基础的也是最常见的，相信做数据的都知道。这种需求<br>我们一般就是使用hive进行统计就完事了，非常的简单。<br>根据url计算每个页面的访问次数和独立访客用户数。</p>
<a id="more"></a>
<h3 id="为什么写这篇文件"><a href="#为什么写这篇文件" class="headerlink" title="为什么写这篇文件?"></a>为什么写这篇文件?</h3><p>我们在统计的时候pv和uv可以说的最基础的也是最常见的，相信做数据的都知道。这种需求<br>我们一般就是使用hive进行统计就完事了，非常的简单。<br>根据url计算每个页面的访问次数和独立访客用户数。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(gi) <span class="keyword">as</span> <span class="string">'pv'</span>, <span class="keyword">count</span>(<span class="keyword">distinct</span> gi) <span class="keyword">as</span> <span class="string">'uv'</span> <span class="keyword">from</span> </div><div class="line"><span class="keyword">table</span> <span class="keyword">where</span> cdate = <span class="string">'2016-06-01'</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">url</span></div></pre></td></tr></table></figure>
<p>那好，我们通过mapreduce如何计算呢?<br>我想我大多数人都是通过在reduce中使用Set或者List进行判断是否在集合中存在，<br>如果不存在那么就加1。<br>事实却是如此，我搜索发现很多blog都是此方法并且内容大致相同，包括我最开始写的mapreduce也是<br>按照这种方法做的。</p>
<p>但是，使用这种方法做数据量小看不出问题，但是数据量一旦非常大就马上出现问题。<br>因为你的数据放在了内存，很容易就oom了。</p>
<p>其实我们需要通过两个mapreduce进行计算。<br>第一个map就是分割url+uid作为key，value为1<br>数据格式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://www.google.com,zhangsan 1</div><div class="line">http://www.google.com,zhangsan 1</div><div class="line">http://www.google.com,zhangsan 1</div></pre></td></tr></table></figure>
<p>相同的key值发送到同一个reduce中，这样的话zhangsan的数据都为1了，reduce不用做什么就是<br>把key写入就行。</p>
<p>然后到了第二个map中，我们将第一个reduce的数据进行拆解就得到了url和uid的数据了<br>由于在第一个mr中已经将相同的uid和url归为一类，所以不会存在重复数据，所以这里就和<br>wordcount一样计算就行了。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>上面已经说了这么多了，是不是感觉很乏味了。来看看代码醒醒脑吧，嘿嘿嘿~</p>
<p>使用hadoop2.7.0</p>
<p>测试数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">http://www.google.com,2016-01-02,dsadasd-dasd-as-das</div><div class="line">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/,2016-01-02,000-111-11-22</div><div class="line">http://www.jd.com/?keyword=dadas&amp;keywordid=34879410794&amp;re_dcp=202m0QjIIg==&amp;traffic_source=1004&amp;test=1&amp;enc=utf8&amp;cu=true&amp;utm_source=baidu-search&amp;utm_medium=cpc&amp;utm_campaign=t_262767352_baidusearch&amp;utm_term=34879410794_0_b0d37d1995654fdb9c013c4eb7544071,2016-01-02,dasdsa-ds-ad-as-da</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsddddd-dsss</div><div class="line">http://mall.jd.com/index-56654.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://item.jd.com/3148810.html,2016-01-02,d99dsa-dsdasdsa-dasdj</div><div class="line">http://item.jd.com/3148810.html,2016-01-02,d99dsa-dsdasdasda-sadas</div><div class="line">http://item.jd.com/3148762.html,2016-01-02,d99dsa-dsdasdsa-xxxx</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</div><div class="line">	<span class="keyword">private</span> LongWritable v = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		</div><div class="line">		String line = value.toString();</div><div class="line">		String[] tokens = line.split(<span class="string">","</span>);</div><div class="line">		</div><div class="line">		<span class="comment">// url + uid</span></div><div class="line">		k.set(tokens[<span class="number">0</span>] + <span class="string">","</span> + tokens[<span class="number">2</span>]);</div><div class="line">		context.write(k, v);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">		context.write(key, NullWritable.get());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVMapperUp</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</div><div class="line">	<span class="keyword">private</span> LongWritable v = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		</div><div class="line">		String line = value.toString();</div><div class="line">		String[] tokens = line.split(<span class="string">","</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (tokens.length != <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">return</span> ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		String url = tokens[<span class="number">0</span>];</div><div class="line">		</div><div class="line">		k.set(url);</div><div class="line">		context.write(k, v);</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVReducerUp</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> LongWritable res = <span class="keyword">new</span> LongWritable();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">		<span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (LongWritable val : values) &#123;</div><div class="line">			sum += val.get();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		res.set(sum);</div><div class="line">		</div><div class="line">		context.write(key, res);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configured;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UVApp</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			</div><div class="line">			args = <span class="keyword">new</span> String[]&#123;<span class="string">"in/browse.txt"</span>, <span class="string">"uv_out"</span>, <span class="string">"f_uv_out"</span>&#125;;</div><div class="line">			ToolRunner.run(<span class="keyword">new</span> Configuration(), <span class="keyword">new</span> UVApp(), args);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		Job job1 = Job.getInstance(conf, <span class="string">"uv"</span>);</div><div class="line">		Job job2 = Job.getInstance(conf, <span class="string">"uv"</span>);</div><div class="line">		</div><div class="line">		job1.setJarByClass(UVApp.class);</div><div class="line">		job2.setJarByClass(UVApp.class);</div><div class="line">		</div><div class="line">		job1.setMapperClass(UVMapper.class);</div><div class="line">		job1.setReducerClass(UVReducer.class);</div><div class="line">		</div><div class="line">		job2.setMapperClass(UVMapperUp.class);</div><div class="line">		job2.setReducerClass(UVReducerUp.class);</div><div class="line">		</div><div class="line">		job1.setMapOutputKeyClass(Text.class);</div><div class="line">		job1.setMapOutputValueClass(LongWritable.class);</div><div class="line">		</div><div class="line">		job2.setMapOutputKeyClass(Text.class);</div><div class="line">		job2.setOutputValueClass(LongWritable.class);</div><div class="line">		</div><div class="line">		job1.setOutputKeyClass(Text.class);</div><div class="line">		job1.setOutputValueClass(NullWritable.class);</div><div class="line">		</div><div class="line">		job2.setOutputKeyClass(Text.class);</div><div class="line">		job2.setOutputValueClass(LongWritable.class);</div><div class="line">		</div><div class="line">		FileInputFormat.addInputPath(job1, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job1, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		</div><div class="line">		FileInputFormat.addInputPath(job2, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job2, <span class="keyword">new</span> Path(args[<span class="number">2</span>]));</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> code = job1.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(code != <span class="number">0</span>)&#123;</div><div class="line">			System.exit(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> job2.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 一般使用分布式框架表示我们数据是比较大的，放内存肯定是不合理的。<br> 看来代码质量有待提高！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[storm整合kafka重复消费问题分析]]></title>
      <url>http://yoursite.com/2016/08/11/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>为什么写这篇文章?<br>最近在整合storm+kafka一直纠结于重复数据的读取，重新启动topology更是把kafka的数据扫描一遍，<br>【如果线上逻辑较重，并且还要往数据库里面插入数据是不是有很多重复数据了！】</p>
<a id="more"></a>
<h3 id="为什么写这篇文章"><a href="#为什么写这篇文章" class="headerlink" title="为什么写这篇文章?"></a>为什么写这篇文章?</h3><p>最近在整合storm+kafka一直纠结于重复数据的读取，重新启动topology更是把kafka的数据扫描一遍，<br>【如果线上逻辑较重，并且还要往数据库里面插入数据是不是有很多重复数据了！】</p>
<h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>zookeeper-3.4.6.tar.gz<br>kafka_2.9.2-0.8.1.1<br>apache-storm-1.0.1.tar.gz</p>
<h3 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h3><p>那我们知道这kafka和storm都是依赖zk的，并且我们在创建topology的时候也是把offset写入到zk<br>但是一开始的程序是非常奇怪的，zk并没有创建我所指定的目录和id。</p>
<p>先来看一个”错误”的例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> cn.base.sk.ex03;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseRichBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitBolt</span> <span class="keyword">extends</span> <span class="title">BaseRichBolt</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1380001209433177193L</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> OutputCollector collector = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map stormConf, TopologyContext context, OutputCollector collector)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.collector = collector;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input)</span> </span>&#123;</div><div class="line">		String word = input.getString(<span class="number">0</span>);</div><div class="line">		System.out.println(<span class="string">"source data =&gt; "</span> + word);</div><div class="line">		<span class="comment">//collector.ack(input);</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.base.sk.ex03;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.storm.Config;</div><div class="line"><span class="keyword">import</span> org.apache.storm.LocalCluster;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.BrokerHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.KafkaSpout;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.SpoutConfig;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.StringScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.ZkHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.spout.SchemeAsMultiScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.TopologyBuilder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.base.sk.ex02.MyKafkaTopology;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTopology</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String zks = <span class="string">"localhost:2181/kafka"</span>;</div><div class="line">		String topic = <span class="string">"topic2"</span>;</div><div class="line">		String zkRoot = <span class="string">"/topic2"</span>;</div><div class="line">		String id = <span class="string">"split"</span>;</div><div class="line"></div><div class="line">		BrokerHosts brokerHosts = <span class="keyword">new</span> ZkHosts(zks);</div><div class="line">		SpoutConfig spoutConf = <span class="keyword">new</span> SpoutConfig(brokerHosts, topic, zkRoot, id);</div><div class="line">		spoutConf.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> StringScheme());</div><div class="line">		spoutConf.zkServers = Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">"localhost"</span>&#125;);</div><div class="line">		spoutConf.zkPort = <span class="number">2181</span>;</div><div class="line"></div><div class="line"></div><div class="line">		TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</div><div class="line">		builder.setSpout(<span class="string">"kafka-spoutx"</span>, <span class="keyword">new</span> KafkaSpout(spoutConf));</div><div class="line">		builder.setBolt(<span class="string">"word-splitx"</span>, <span class="keyword">new</span> SplitBolt()).shuffleGrouping(<span class="string">"kafka-spoutx"</span>);</div><div class="line"></div><div class="line">		Config conf = <span class="keyword">new</span> Config();</div><div class="line">		String name = MyKafkaTopology.class.getSimpleName();</div><div class="line">		conf.setMaxTaskParallelism(<span class="number">3</span>);</div><div class="line"></div><div class="line">		LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</div><div class="line">		cluster.submitTopology(name, conf, builder.createTopology());</div><div class="line"></div><div class="line"><span class="comment">//		Utils.sleep(10000);</span></div><div class="line"><span class="comment">//		cluster.shutdown();</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>上面这个例子是无法在zk中创建/topic2/split的，至于为什么我在后面会说明。<br>由于也是最近几天才开始撸起来的所以我就各种搜索，在一个blog中找到了说明</p>
<p><font color="DeepPink" size="2">原文<br>    此处需要特别注意的是，要使用backtype.storm.topology.base.BaseBasicBolt对象作为父类，否则不会在zk记录偏移量offset数据。<br></font><br>后来我修改bolt继承该类确实在zk中创建出了topic，但是至于为什么并没有详细说明。<br>我们先来看看修改后的code。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> cn.base.sk.ex02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.BasicOutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseBasicBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseRichBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Values;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaWordSplitter</span> <span class="keyword">extends</span> <span class="title">BaseBasicBolt</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(KafkaWordSplitter.class);</div><div class="line">	<span class="keyword">private</span> OutputCollector collector;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input, BasicOutputCollector collector)</span> </span>&#123;</div><div class="line">		String line = input.getString(<span class="number">0</span>);</div><div class="line">		System.out.println(<span class="string">"RECV[kafka -&gt; splitter] "</span> + line);</div><div class="line"></div><div class="line">		String[] words = line.split(<span class="string">","</span>);</div><div class="line">		<span class="keyword">for</span> (String word : words) &#123;</div><div class="line">			System.out.println(<span class="string">"EMIT[splitter -&gt; counter] "</span> + word);</div><div class="line">			collector.emit(<span class="keyword">new</span> Values(word, <span class="number">1</span>));</div><div class="line">		&#125;</div><div class="line"></div><div class="line"><span class="comment">//		collector.ack(input);</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class="line">		declarer.declare(<span class="keyword">new</span> Fields(<span class="string">"word"</span>, <span class="string">"count"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.base.sk.ex02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Map.Entry;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.BasicOutputCollector;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseBasicBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.base.BaseRichBolt;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCounter</span> <span class="keyword">extends</span> <span class="title">BaseBasicBolt</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(WordCounter.class);</div><div class="line">	<span class="keyword">private</span> OutputCollector collector;</div><div class="line">	<span class="keyword">private</span> Map&lt;String, AtomicInteger&gt; countMap;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map stormConf, TopologyContext context)</span> </span>&#123;</div><div class="line">		countMap = <span class="keyword">new</span> HashMap&lt;String, AtomicInteger&gt;();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"The final result:"</span>);</div><div class="line">		Iterator&lt;Entry&lt;String, AtomicInteger&gt;&gt; iter = <span class="keyword">this</span>.countMap.entrySet().iterator();</div><div class="line">		<span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line"></div><div class="line">			Entry&lt;String, AtomicInteger&gt; entry = iter.next();</div><div class="line">			System.out.println(entry.getKey() + <span class="string">"\t:\t"</span> + entry.getValue().get());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input, BasicOutputCollector collector)</span> </span>&#123;</div><div class="line">		String word = input.getString(<span class="number">0</span>);</div><div class="line">		Integer count = input.getInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"RECV[splitter -&gt; counter] "</span> + word + <span class="string">" : "</span> + count);</div><div class="line">		AtomicInteger ai = <span class="keyword">this</span>.countMap.get(word);</div><div class="line">		<span class="keyword">if</span> (ai == <span class="keyword">null</span>) &#123;</div><div class="line">			ai = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line">			<span class="keyword">this</span>.countMap.put(word, ai);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			ai.addAndGet(count);</div><div class="line"><span class="comment">//			collector.ack(input);</span></div><div class="line">			System.out.println(<span class="string">"CHECK statistics map: "</span> + <span class="keyword">this</span>.countMap);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.base.sk.ex02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.kafka.common.utils.Utils;</div><div class="line"><span class="keyword">import</span> org.apache.storm.Config;</div><div class="line"><span class="keyword">import</span> org.apache.storm.LocalCluster;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.BrokerHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.KafkaSpout;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.SpoutConfig;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.StringScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.kafka.ZkHosts;</div><div class="line"><span class="keyword">import</span> org.apache.storm.spout.SchemeAsMultiScheme;</div><div class="line"><span class="keyword">import</span> org.apache.storm.topology.TopologyBuilder;</div><div class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</div><div class="line"></div><div class="line"><span class="keyword">import</span> scala.actors.threadpool.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKafkaTopology</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String zks = <span class="string">"localhost:2181/kafka"</span>;</div><div class="line">		String topic = <span class="string">"topic1"</span>;</div><div class="line">		String zkRoot = <span class="string">"/topic1"</span>;</div><div class="line">		String id = <span class="string">"word"</span>;</div><div class="line"></div><div class="line">		BrokerHosts brokerHosts = <span class="keyword">new</span> ZkHosts(zks);</div><div class="line">		SpoutConfig spoutConf = <span class="keyword">new</span> SpoutConfig(brokerHosts, topic, zkRoot, id);</div><div class="line">		spoutConf.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> StringScheme());</div><div class="line">		spoutConf.zkServers = Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">"localhost"</span>&#125;);</div><div class="line">		spoutConf.zkPort = <span class="number">2181</span>;</div><div class="line"></div><div class="line"></div><div class="line">		TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</div><div class="line">		builder.setSpout(<span class="string">"kafka-spout"</span>, <span class="keyword">new</span> KafkaSpout(spoutConf));</div><div class="line">		builder.setBolt(<span class="string">"word-split"</span>, <span class="keyword">new</span> KafkaWordSplitter()).shuffleGrouping(<span class="string">"kafka-spout"</span>);</div><div class="line">		builder.setBolt(<span class="string">"word-count"</span>, <span class="keyword">new</span> WordCounter()).fieldsGrouping(<span class="string">"word-split"</span>, <span class="keyword">new</span> Fields(<span class="string">"word"</span>));</div><div class="line"></div><div class="line">		Config conf = <span class="keyword">new</span> Config();</div><div class="line">		String name = MyKafkaTopology.class.getSimpleName();</div><div class="line">		conf.setMaxTaskParallelism(<span class="number">3</span>);</div><div class="line"></div><div class="line">		LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</div><div class="line">		cluster.submitTopology(name, conf, builder.createTopology());</div><div class="line"></div><div class="line"><span class="comment">//		Utils.sleep(10000);</span></div><div class="line"><span class="comment">//		cluster.shutdown();</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原谅我写了两个例子吧!<br>好的，上面一大段代码是修改过的。此时进入zkcli已经创建出来了我们所需的路径<br>并且已经记录了offset</p>
<p><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/01.png?raw=true" alt="zk数据"></p>
<p>读取数据的时候就从这里开始了。<br>那好，为啥继承了BaseBasicBolt类就可以，而BaseRichBolt类就不行呢。</p>
<h3 id="走进源码"><a href="#走进源码" class="headerlink" title="走进源码"></a>走进源码</h3><p>首先看看KafkaSpout类的open方法做了一些初始化的工作<br>下图才是我么要看的</p>
<p><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/02.png?raw=true" alt="kafkaSpout!nextTuple"></p>
<p>不用在意其它方法，直接进入commit()方法<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/03.png?raw=true" alt="kafkaSpout!commit"></p>
<p>看到没， 只要if成立就会在zk中创建数据。但是为什么不能进入呢，来看看lastCompletedOffset<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/04.png?raw=true" alt="kafkaSpout!lastCompletedOffset"></p>
<p>当你debug到这里的时候首先获取的是第一个key，这个map的key是offset，value是timestamp<br>读一次会和上一次进行比较，最终在里面重新赋值最新的offset。</p>
<p>仔细观察，如果继承BaseRichSpout类，调用过后map的key依旧存在，而BaseBasicBolt会进行删除，如果不删除的话会在commit判断时候一直相等。</p>
<p>那么，是在什么时候进行删除的呢？如果是你，你会想在什么时候把这份数据进行删除？<br>对的，当我们确认完毕这条数据被消费后，我们可以进行删除了。</p>
<p>在进行ack之后，我们看到删除map的数据，这样就顺利的在zk里面创建并写入数据。<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/05.png?raw=true" alt="kafkaSpout!ack"></p>
<p>那么，如果我就想继承自BaseRichBolt类，那有办法实现吗？肯定的，你只需要自己ack一下就行了<br><img src="https://github.com/basebase/img_server/blob/master/storm%E6%95%B4%E5%90%88kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90_img/06.png?raw=true" alt="UserBolt!ack"></p>
<p>ok，此时你在次打开zkcli查看就存在指定的目录和id，并且重启topology也不会重新读取历史。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>BaseBasicBolt没有提供ack而是隐示进行了调用，而BaseRichSpout需要显示调用。</p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>参考：<a href="http://www.howardliu.cn/a-few-notes-about-storm/" target="_blank" rel="external">http://www.howardliu.cn/a-few-notes-about-storm/</a></p>
]]></content>
    </entry>
    
  
  
</search>
